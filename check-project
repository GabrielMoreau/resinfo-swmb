#!/bin/bash
#
# 2020/06/11 Gabriel Moreau


function msg1 {
   local msg=$1
   local total=$2
 
   printf "%-4s: %-49s = %3i\n" 'Info' "${msg}" "${total}"
   }

function msg2 {
   local msg=$1
   local on=$2
   local off=$3

   local status='Info'
   if [ "${on}" != "${off}" ]
   then
      status='Warn'
   fi

   printf "%-4s: %-38s: %3i / %3i = %3i\n" "${status}" "${msg}" "${on}" "${off}" $((${on} + ${off}))
   }

# list of files
all_module=$(find . -path './Modules/SWMB/*.psm1' -print)
swmb_module=$(find . -path './Modules/SWMB/Win10-*.psm1' -prune -o -path './Modules/SWMB/CurrentUser-*.psm1' -prune -o -path './Modules/SWMB/*.psm1' -print)

# global numbers
msg1 "number of SWMB rules" \
   $(grep -hEi '^Function[[:space:]](Enable|Disable)' ${swmb_module} | awk '{print $2}' | wc -l)

msg2 "number of enable and disable rules" \
   $(grep -hEi '^Function[[:space:]](Enable)' ${all_module} | awk '{print $2}' | wc -l) \
   $(grep -hEi '^Function[[:space:]](Disable)' ${all_module} | awk '{print $2}' | wc -l)

msg2 "number of install and uninstall rules" \
   $(grep -hEi '^Function[[:space:]](Install)' ${all_module} | awk '{print $2}' | wc -l) \
   $(grep -hEi '^Function[[:space:]](Uninstall)' ${all_module} | awk '{print $2}' | wc -l)

msg2 "number of show and hide rules" \
   $(grep -hEi '^Function[[:space:]](Show)' ${all_module} | awk '{print $2}' | wc -l) \
   $(grep -hEi '^Function[[:space:]](Hide)' ${all_module} | awk '{print $2}' | wc -l)

msg2 "number of add and remove rules" \
   $(grep -hEi '^Function[[:space:]](Add)' ${all_module} | awk '{print $2}' | wc -l) \
   $(grep -hEi '^Function[[:space:]](Remove)' ${all_module} | awk '{print $2}' | wc -l)

msg2 "number of set and unset rules" \
   $(grep -hEi '^Function[[:space:]](Set)' ${all_module} | awk '{print $2}' | wc -l) \
   $(grep -hEi '^Function[[:space:]](Unset)' ${all_module} | awk '{print $2}' | wc -l)

msg2 "number of pin and unpin rules" \
   $(grep -hEi '^Function[[:space:]](Pin)' ${all_module} | awk '{print $2}' | wc -l) \
   $(grep -hEi '^Function[[:space:]](Unpin)' ${all_module} | awk '{print $2}' | wc -l)
   
msg1 "number of total rules"  \
   $(grep -hEi '^Function (Enable|Disable|Show|Hide|Install|Uninstall|Add|Remove|Set|Unset|Pin|Unpin)' ${all_module} | wc -l)

msg1 "number of total functions" \
   $(grep -hEi '^Function[[:space:]]' ${all_module} | awk '{print $2}' | wc -l)

msg1 "number of view functions (debug)" \
   $(grep -hEi '^Function[[:space:]](View)' ${all_module} | awk '{print $2}' | wc -l)

# function that are not in case Enable|Disable|Show|Hide|Install|Uninstall|Add|Remove|Set|Unset|Pin|Unpin
grep -hEi '^Function[[:space:]]' ${all_module} \
   | grep -Eiv '^Function (Enable|Disable|Show|Hide|Install|Uninstall|Add|Remove|Set|Unset|Pin|Unpin|View)' \
   | awk '{print $2}' \
   | xargs -r -n 1 printf "Warning: special function: %s\n"


# detect a forgotten rule and multiple identical rule definitions in our rules
while read rule
do
   for status in 'Enable' 'Disable'
   do
      nb_rule=$(grep -E "^Function[[:space:]]${status}${rule}[[:space:]]{" ${all_module} | wc -l)
      if [ ${nb_rule} -eq 0 ]
      then
         echo "Error: undefined function: " ${status}${rule}
      elif [ ${nb_rule} -gt 1 ]
      then
         echo "Error: ${nb_rule} copies of the function: " ${status}${rule}
      fi
   done
done < <(grep -hEi '^Function[[:space:]](Enable|Disable)' ${all_module} \
   | awk '{print $2}' \
   | sed -Ee 's/^(Enable|Disable)//i;' \
   | sort -u)

# Enable|Disable|Show|Hide|Install|Uninstall|Add|Remove|Set|Unset|Pin|Unpin...
kind_rule=$(grep -i '^Function[[:space:]]' ${swmb_module} \
   | awk '{print $2}' \
   | grep -Eo '^[A-Z][a-z]+' \
   | sort -u \
   | tr '\n' '|' \
   | sed -e 's/|$//;')
# detect the definition of a missing preset
for rule in $(grep -hEi "^Function[[:space:]](${kind_rule})" ${swmb_module} \
   | awk '{print $2}' \
   | sed -Ee "s/^(${kind_rule})//i;" \
   | sort -u)
do
   if ! grep -Eq "^(#[[:space:]])?(${kind_rule})${rule}" Presets/*.preset
   then
      # Do not propose preset for current user
      #echo ${rule}| grep -q '_CU$' && continue

      echo "Warning: no preset proposed for rule: ${rule}"
   fi
done
